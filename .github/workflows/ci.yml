# This file is part of the pCloud Console Client.
#
# (c) 2021 Serghei Iakovlev <egrep@protonmail.ch>
#
# For the full copyright and license information, please view
# the LICENSE file that was distributed with this source code.

name: CI

on:
  push:
    branches:
      - master
      - 'feature/**'
      - 'fix/**'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

  pull_request:
    branches:
      - master

  schedule:
    - cron: '0 11 * * *'
      #      | | | | |
      #      | | | | |____ day of the week (0 - 6 or SUN-SAT)
      #      | | | |____ month (1 - 12 or JAN-DEC)
      #      | | |____ day of the month (1 - 31)
      #      | |____ hour (0 - 23)
      #      |____ minute (0 - 59)

jobs:
  simple_build:
    # To prevent build a particular commit use
    #     git commit -m "......... [ci skip]"
    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:

        include:
          - name: linux-gcc-debug
            build-type: Debug
            os: ubuntu-18.04
            ssl: mbedtls
            compiler: gcc
            arch: x64
            version: '5'

          - name: linux-clang-debug
            build-type: Debug
            os: ubuntu-18.04
            ssl: mbedtls
            compiler: clang
            arch: x64
            version: '5.0'

          - name: macos-clang-debug
            build-type: Debug
            os: macos-latest
            ssl: mbedtls
            compiler: apple-clang
            arch: x64
            version: '12.0'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 5

      - name: Setup Common Prerequisites
        run: |
          case ${{ runner.os }} in
            Linux*)
              # Add more toolchains
              echo 'debconf debconf/frontend select Noninteractive' | sudo debconf-set-selections
              sudo add-apt-repository ppa:ubuntu-toolchain-r/test --yes
              sudo apt-get update --quiet --yes 1>/dev/null

              # Install compiler
              source .github/install-compiler-linux.sh \
                "${{ matrix.compiler }}" "${{ matrix.version }}"

              # Install build deps
              sudo apt-get install --no-install-recommends -q -y \
                 cmake \
                 doxygen \
                 fuse \
                 libfuse-dev \
                 libpthread-stubs0-dev \
                 ninja-build \
                 pkg-config
              ;;
            macOS*)
              sudo xcode-select -switch /Applications/Xcode.app

              echo "CC=$(xcrun -f clang)" >> $GITHUB_ENV
              echo "CXX=$(xcrun -f clang++)" >> $GITHUB_ENV
              echo "SDKROOT=$(xcodebuild -version -sdk macosx Path)" >> $GITHUB_ENV

              echo "$(xcodebuild -version -sdk macosx Path)" >> $GITHUB_PATH

              # Install common tools
              brew install cmake doxygen macfuse ninja
              ;;
          esac

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
          architecture: ${{ matrix.arch }}

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install conan

      - name: Verify Toolchain Version
        run: |
          $CC --version
          $CXX --version
          cmake --version
          conan --version

      - name: Setting Up Build Vars
        id: build-vars
        run: |
          p="${{ runner.os }}-${{ matrix.arch }}"
          s="${{ matrix.ssl }}"
          c="${{ matrix.compiler }}"
          cv="${c}-${{ matrix.version }}"
          b="${{ matrix.build-type }}"
          preset="$(echo "${p}-${cv}-${b}" | tr '[:upper:]' '[:lower:]')"

          echo "CONAN_USER_HOME=$(conan config home)" >> $GITHUB_ENV
          echo "$(pwd)/out/install/${preset}/bin" >> $GITHUB_PATH

          echo "::set-output name=CMAKE_PRESET::$preset"
          echo "::set-output name=CONAN_PROFILE::$(echo "${p}-${cv}-${b}" | tr '[:upper:]' '[:lower:]')"

      - name: Setup Conan Cache
        id: conan-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CONAN_USER_HOME }}/.conan/data
          key: ${{ runner.os }}-conan-${{ matrix.compiler }}-${{ hashFiles('**/conanfile.txt') }}
          restore-keys: |
            ${{ runner.os }}-conan-${{ matrix.compiler }}-

      - name: Configure Conan
        run: |
          mkdir -p "${{ env.CONAN_USER_HOME }}/.conan/profiles"

          # WARN: Remotes registry file missing, creating default one
          cp tools/conan/remotes.json "${{ env.CONAN_USER_HOME }}/.conan/remotes.json"

          # Install conan profiles
          cp tools/conan/profiles/* "${{ env.CONAN_USER_HOME }}/.conan/profiles/"
          conan profile list

      - name: Install The Requirements Using Conan
        run: >-
          conan
          install .
          --install-folder out/build/${{ steps.build-vars.outputs.CMAKE_PRESET }}
          --profile ${{ steps.build-vars.outputs.CONAN_PROFILE }}
          --build missing

      - name: Configure client
        run: cmake -S . --preset=${{ steps.build-vars.outputs.CMAKE_PRESET }}

      - name: Build client
        run: cmake --build --preset=${{ steps.build-vars.outputs.CMAKE_PRESET }}

      - name: Run Tests
        run: ctest --preset=${{ steps.build-vars.outputs.CMAKE_PRESET }}

      - name: Build Documentation
        run:  cmake --build --preset=${{ steps.build-vars.outputs.CMAKE_PRESET }} --target doc

      - name: Install client
        run: cmake --build --preset=${{ steps.build-vars.outputs.CMAKE_PRESET }} --target install

      - name: Minimal Install Test
        run: |
          pcloudcc --version
          pcloudcc --vernum
          pcloudcc --dumpversion
          pcloudcc --help

      - name: Success Reporting
        if: success()
        run: git log --format=fuller -5
